# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import monitor_pb2 as monitor__pb2


class MonitorServiceStub(object):
    """System and ROS monitor service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSystemDiagnostics = channel.unary_unary(
                '/fkie_multimaster_msgs.monitor.MonitorService/GetSystemDiagnostics',
                request_serializer=monitor__pb2.Filter.SerializeToString,
                response_deserializer=monitor__pb2.DiagnosticArray.FromString,
                )
        self.GetSystemWarnings = channel.unary_unary(
                '/fkie_multimaster_msgs.monitor.MonitorService/GetSystemWarnings',
                request_serializer=monitor__pb2.Empty.SerializeToString,
                response_deserializer=monitor__pb2.DiagnosticArray.FromString,
                )
        self.GetDiagnostics = channel.unary_unary(
                '/fkie_multimaster_msgs.monitor.MonitorService/GetDiagnostics',
                request_serializer=monitor__pb2.Filter.SerializeToString,
                response_deserializer=monitor__pb2.DiagnosticArray.FromString,
                )
        self.GetWarnings = channel.unary_unary(
                '/fkie_multimaster_msgs.monitor.MonitorService/GetWarnings',
                request_serializer=monitor__pb2.Empty.SerializeToString,
                response_deserializer=monitor__pb2.DiagnosticArray.FromString,
                )
        self.KillProcess = channel.unary_unary(
                '/fkie_multimaster_msgs.monitor.MonitorService/KillProcess',
                request_serializer=monitor__pb2.Pid.SerializeToString,
                response_deserializer=monitor__pb2.Empty.FromString,
                )


class MonitorServiceServicer(object):
    """System and ROS monitor service definition.
    """

    def GetSystemDiagnostics(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSystemWarnings(self, request, context):
        """returns only warnings and errors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDiagnostics(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWarnings(self, request, context):
        """returns only warnings and errors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KillProcess(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MonitorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSystemDiagnostics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemDiagnostics,
                    request_deserializer=monitor__pb2.Filter.FromString,
                    response_serializer=monitor__pb2.DiagnosticArray.SerializeToString,
            ),
            'GetSystemWarnings': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemWarnings,
                    request_deserializer=monitor__pb2.Empty.FromString,
                    response_serializer=monitor__pb2.DiagnosticArray.SerializeToString,
            ),
            'GetDiagnostics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDiagnostics,
                    request_deserializer=monitor__pb2.Filter.FromString,
                    response_serializer=monitor__pb2.DiagnosticArray.SerializeToString,
            ),
            'GetWarnings': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWarnings,
                    request_deserializer=monitor__pb2.Empty.FromString,
                    response_serializer=monitor__pb2.DiagnosticArray.SerializeToString,
            ),
            'KillProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.KillProcess,
                    request_deserializer=monitor__pb2.Pid.FromString,
                    response_serializer=monitor__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fkie_multimaster_msgs.monitor.MonitorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MonitorService(object):
    """System and ROS monitor service definition.
    """

    @staticmethod
    def GetSystemDiagnostics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fkie_multimaster_msgs.monitor.MonitorService/GetSystemDiagnostics',
            monitor__pb2.Filter.SerializeToString,
            monitor__pb2.DiagnosticArray.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSystemWarnings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fkie_multimaster_msgs.monitor.MonitorService/GetSystemWarnings',
            monitor__pb2.Empty.SerializeToString,
            monitor__pb2.DiagnosticArray.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDiagnostics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fkie_multimaster_msgs.monitor.MonitorService/GetDiagnostics',
            monitor__pb2.Filter.SerializeToString,
            monitor__pb2.DiagnosticArray.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWarnings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fkie_multimaster_msgs.monitor.MonitorService/GetWarnings',
            monitor__pb2.Empty.SerializeToString,
            monitor__pb2.DiagnosticArray.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KillProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fkie_multimaster_msgs.monitor.MonitorService/KillProcess',
            monitor__pb2.Pid.SerializeToString,
            monitor__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
