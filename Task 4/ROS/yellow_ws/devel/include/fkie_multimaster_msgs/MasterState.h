// Generated by gencpp from file fkie_multimaster_msgs/MasterState.msg
// DO NOT EDIT!


#ifndef FKIE_MULTIMASTER_MSGS_MESSAGE_MASTERSTATE_H
#define FKIE_MULTIMASTER_MSGS_MESSAGE_MASTERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fkie_multimaster_msgs/ROSMaster.h>

namespace fkie_multimaster_msgs
{
template <class ContainerAllocator>
struct MasterState_
{
  typedef MasterState_<ContainerAllocator> Type;

  MasterState_()
    : state()
    , master()  {
    }
  MasterState_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , master(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef  ::fkie_multimaster_msgs::ROSMaster_<ContainerAllocator>  _master_type;
  _master_type master;




  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STATE_NEW;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STATE_REMOVED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STATE_CHANGED;

  typedef boost::shared_ptr< ::fkie_multimaster_msgs::MasterState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fkie_multimaster_msgs::MasterState_<ContainerAllocator> const> ConstPtr;

}; // struct MasterState_

typedef ::fkie_multimaster_msgs::MasterState_<std::allocator<void> > MasterState;

typedef boost::shared_ptr< ::fkie_multimaster_msgs::MasterState > MasterStatePtr;
typedef boost::shared_ptr< ::fkie_multimaster_msgs::MasterState const> MasterStateConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      MasterState_<ContainerAllocator>::STATE_NEW =
        
          "new"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      MasterState_<ContainerAllocator>::STATE_REMOVED =
        
          "removed"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      MasterState_<ContainerAllocator>::STATE_CHANGED =
        
          "changed"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fkie_multimaster_msgs::MasterState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fkie_multimaster_msgs::MasterState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fkie_multimaster_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'fkie_multimaster_msgs': ['/home/aaryen/yellow_ws/src/multimaster/fkie_multimaster_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fkie_multimaster_msgs::MasterState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fkie_multimaster_msgs::MasterState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fkie_multimaster_msgs::MasterState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fkie_multimaster_msgs::MasterState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fkie_multimaster_msgs::MasterState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fkie_multimaster_msgs::MasterState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fkie_multimaster_msgs::MasterState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57b4a7ca6d8d63698265905f8b102ef4";
  }

  static const char* value(const ::fkie_multimaster_msgs::MasterState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57b4a7ca6d8d6369ULL;
  static const uint64_t static_value2 = 0x8265905f8b102ef4ULL;
};

template<class ContainerAllocator>
struct DataType< ::fkie_multimaster_msgs::MasterState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fkie_multimaster_msgs/MasterState";
  }

  static const char* value(const ::fkie_multimaster_msgs::MasterState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fkie_multimaster_msgs::MasterState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string state\n\
fkie_multimaster_msgs/ROSMaster master\n\
\n\
string STATE_NEW=new\n\
string STATE_REMOVED=removed\n\
string STATE_CHANGED=changed\n\
\n\
================================================================================\n\
MSG: fkie_multimaster_msgs/ROSMaster\n\
string name\n\
# ROS Master URI\n\
string uri\n\
# The timestamp of the state of the remoter ROS master\n\
float64 timestamp\n\
# The timestamp of the state of the remoter ROS master, without the changes maked while a synchronization.\n\
float64 timestamp_local\n\
bool online\n\
string discoverer_name\n\
string monitoruri\n\
";
  }

  static const char* value(const ::fkie_multimaster_msgs::MasterState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fkie_multimaster_msgs::MasterState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.master);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MasterState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fkie_multimaster_msgs::MasterState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fkie_multimaster_msgs::MasterState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "master: ";
    s << std::endl;
    Printer< ::fkie_multimaster_msgs::ROSMaster_<ContainerAllocator> >::stream(s, indent + "  ", v.master);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FKIE_MULTIMASTER_MSGS_MESSAGE_MASTERSTATE_H
